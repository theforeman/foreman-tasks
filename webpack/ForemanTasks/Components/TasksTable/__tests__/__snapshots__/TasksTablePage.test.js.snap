// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TasksTablePage rendering render with Breadcrubs and edit permissions 1`] = `
<div
  className="tasks-table-wrapper"
>
  <Connect(ConfirmModal)
    id="ConfirmModal"
    parentTaskID={null}
    setModalClosed={[MockFunction]}
    uriQuery={
      Object {
        "state": "stopped",
      }
    }
    url="/foreman_tasks/tasks?action=\\"some-name\\""
  />
  <PageLayout
    beforeToolbarComponent={
      <Memo(Connect(TasksDashboard))
        history={
          Object {
            "location": Object {
              "pathname": "/foreman_tasks/tasks",
              "search": "?action=\\"some-name\\"",
            },
          }
        }
        parentTaskID={null}
      />
    }
    breadcrumbOptions={
      Object {
        "breadcrumbItems": Array [
          Object {
            "caption": "Tasks",
            "url": "/foreman_tasks/tasks",
          },
          Object {
            "caption": "action Name",
            "url": "/foreman_tasks/tasks/someid",
          },
          Object {
            "caption": "Sub tasks",
          },
        ],
      }
    }
    header="Tasks"
    onSearch={[Function]}
    searchProps={
      Object {
        "autocomplete": Object {
          "id": "searchBar",
          "searchQuery": "",
          "url": "tasks/auto_complete_search",
          "useKeyShortcuts": true,
        },
        "bookmarks": Object {
          "canCreateBookmarks": true,
          "documentationUrl": "4.1.5Searching",
          "url": "/api/bookmarks",
        },
        "controller": "foreman_tasks_tasks",
      }
    }
    searchQuery="a=b"
    searchable={true}
    toolbarButtons={
      <React.Fragment>
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="default"
          disabled={false}
          onClick={[Function]}
        >
          <Icon
            name="refresh"
            type="fa"
          />
           
          Refresh Data
        </Button>
        <Spinner
          className=""
          inline={false}
          inverse={false}
          loading={true}
          size="md"
        />
        <ExportButton
          title="Export All"
          url="/foreman_tasks/tasks.csv?search=%28state%3Dstopped%29"
        />
        <ActionSelectButton
          disabled={true}
          onCancel={[Function]}
          onForceCancel={[Function]}
          onResume={[Function]}
        />
      </React.Fragment>
    }
  >
    <TasksTable
      actionName=""
      allRowsSelected={false}
      error={null}
      getTableItems={[MockFunction]}
      history={
        Object {
          "location": Object {
            "pathname": "/foreman_tasks/tasks",
            "search": "?action=\\"some-name\\"",
          },
        }
      }
      itemCount={2}
      openClickedModal={[MockFunction]}
      openModal={[Function]}
      parentTaskID={null}
      perPage={10}
      permissions={
        Object {
          "edit": false,
        }
      }
      reloadPage={[MockFunction]}
      results={
        Array [
          Object {
            "action": "a",
            "canEdit": true,
          },
        ]
      }
      selectPage={[MockFunction]}
      selectRow={[MockFunction]}
      selectedRows={Array []}
      sort={
        Object {
          "by": "q",
          "order": "w",
        }
      }
      status="PENDING"
      unselectAllRows={[MockFunction]}
      unselectRow={[MockFunction]}
    />
  </PageLayout>
</div>
`;

exports[`TasksTablePage rendering render with minimal props 1`] = `
<div
  className="tasks-table-wrapper"
>
  <Connect(ConfirmModal)
    id="ConfirmModal"
    parentTaskID={null}
    setModalClosed={[MockFunction]}
    uriQuery={
      Object {
        "state": "stopped",
      }
    }
    url="/foreman_tasks/tasks?action=\\"some-name\\""
  />
  <PageLayout
    beforeToolbarComponent={
      <Memo(Connect(TasksDashboard))
        history={
          Object {
            "location": Object {
              "pathname": "/foreman_tasks/tasks",
              "search": "?action=\\"some-name\\"",
            },
          }
        }
        parentTaskID={null}
      />
    }
    header="Tasks"
    onSearch={[Function]}
    searchProps={
      Object {
        "autocomplete": Object {
          "id": "searchBar",
          "searchQuery": "",
          "url": "tasks/auto_complete_search",
          "useKeyShortcuts": true,
        },
        "bookmarks": Object {
          "canCreateBookmarks": true,
          "documentationUrl": "4.1.5Searching",
          "url": "/api/bookmarks",
        },
        "controller": "foreman_tasks_tasks",
      }
    }
    searchQuery="a=b"
    searchable={true}
    toolbarButtons={
      <React.Fragment>
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="default"
          disabled={false}
          onClick={[Function]}
        >
          <Icon
            name="refresh"
            type="fa"
          />
           
          Refresh Data
        </Button>
        <Spinner
          className=""
          inline={false}
          inverse={false}
          loading={true}
          size="md"
        />
        <ExportButton
          title="Export All"
          url="/foreman_tasks/tasks.csv?search=%28state%3Dstopped%29"
        />
        <ActionSelectButton
          disabled={true}
          onCancel={[Function]}
          onForceCancel={[Function]}
          onResume={[Function]}
        />
      </React.Fragment>
    }
  >
    <TasksTable
      actionName=""
      allRowsSelected={false}
      error={null}
      getTableItems={[MockFunction]}
      history={
        Object {
          "location": Object {
            "pathname": "/foreman_tasks/tasks",
            "search": "?action=\\"some-name\\"",
          },
        }
      }
      itemCount={2}
      openClickedModal={[MockFunction]}
      openModal={[Function]}
      parentTaskID={null}
      perPage={10}
      permissions={
        Object {
          "edit": false,
        }
      }
      reloadPage={[MockFunction]}
      results={
        Array [
          "a",
          "b",
        ]
      }
      selectPage={[MockFunction]}
      selectRow={[MockFunction]}
      selectedRows={Array []}
      sort={
        Object {
          "by": "q",
          "order": "w",
        }
      }
      status="PENDING"
      unselectAllRows={[MockFunction]}
      unselectRow={[MockFunction]}
    />
  </PageLayout>
</div>
`;
